<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Add Product</title>
  <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/ethers@6.14.0/dist/ethers.umd.min.js"></script>
  <style>
    html, body { height: 100%; }
    body { display: flex; flex-direction: column; }
    main { flex: 1; }
  </style>
</head>
<body>
  <%- include('partials/header') %>

  <div class="container mt-5">
    <h1 class="text-center mb-4">Add Product</h1>

    <!-- Wallet Buttons -->
    <div class="mb-3">
      <button id="connectBtn" class="btn btn-success">üîå Connect Wallet</button>
      <button id="disconnectBtn" class="btn btn-danger">‚ùå Disconnect</button>
      <p>Connected Address: <span id="wallet-address" class="fw-bold">Not connected</span></p>
    </div>

    <!-- Product Form -->
    <form id="productForm" class="needs-validation" novalidate>
      <div class="mb-3">
        <label for="productName" class="form-label">Product Name:</label>
        <input type="text" id="productName" name="productName" class="form-control" required>
        <div class="invalid-feedback">Please enter a product name.</div>
      </div>
      <div class="mb-3">
        <label for="manufacturer" class="form-label">Manufacturer:</label>
        <input type="text" id="manufacturer" name="manufacturer" class="form-control" required>
        <div class="invalid-feedback">Please enter the manufacturer name.</div>
      </div>
      <div class="mb-3">
        <label for="basePrice" class="form-label">Base Price:</label>
        <input type="number" id="basePrice" name="basePrice" class="form-control" required>
        <div class="invalid-feedback">Please enter the base price.</div>
      </div>
      <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-primary">Add Product</button>
        <button type="button" class="btn btn-secondary" onclick="window.history.back();">Cancel</button>
      </div>
    </form>
  </div>

  <%- include('partials/footer') %>

  <!-- ABI loading and MetaMask logic -->
  <script>
    let signer, userAddress;

    document.getElementById('connectBtn').onclick = async () => {
      if (window.ethereum) {
        const provider = new ethers.BrowserProvider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        signer = await provider.getSigner();
        userAddress = await signer.getAddress();
        document.getElementById('wallet-address').textContent = userAddress;
      } else {
        alert('Please install MetaMask!');
      }
    };

    document.getElementById('disconnectBtn').onclick = () => {
      signer = null;
      userAddress = null;
      document.getElementById('wallet-address').textContent = 'Not connected';
    };

    document.getElementById('productForm').onsubmit = async (e) => {
      e.preventDefault();
      if (!signer) return alert("Connect wallet first.");

      const productName = document.getElementById('productName').value;
      const manufacturer = document.getElementById('manufacturer').value;
      const basePrice = document.getElementById('basePrice').value;

      const productID = manufacturer.replace(/[^a-zA-Z0-9]/g, '').toUpperCase() + "|" + productName.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();

      try {
        const res = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "company",
				"type": "address"
			}
		],
		"name": "CompanyRegistered",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "company",
				"type": "address"
			}
		],
		"name": "CompanyRevoked",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "string",
				"name": "productID",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "productName",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "basePrice",
				"type": "uint256"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "company",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "ProductCreated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "string",
				"name": "productID",
				"type": "string"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "company",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "ProductDeleted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "string",
				"name": "productID",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "productName",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "basePrice",
				"type": "uint256"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "company",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "ProductUpdated",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "productID",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "productName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "basePrice",
				"type": "uint256"
			}
		],
		"name": "createProduct",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "productID",
				"type": "string"
			}
		],
		"name": "deleteProduct",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "company",
				"type": "address"
			}
		],
		"name": "registerCompany",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "company",
				"type": "address"
			}
		],
		"name": "revokeCompany",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "productID",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "productName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "manufacturer",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "basePrice",
				"type": "uint256"
			}
		],
		"name": "updateProduct",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "admin",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getAllProducts",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "productID",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "productName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "manufacturer",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "basePrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "company",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "createdAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"internalType": "struct ProductRegistry.Product[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "productID",
				"type": "string"
			}
		],
		"name": "getProduct",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "company",
				"type": "address"
			}
		],
		"name": "getProductsByCompany",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "productID",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "productName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "manufacturer",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "basePrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "company",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "createdAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"internalType": "struct ProductRegistry.Product[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "isCompany",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
        const abi = res;
        const contract = new ethers.Contract('<%= process.env.CONTRACT_ADDRESS %>', abi, signer);

        const tx = await contract.createProduct(productID, productName, manufacturer, basePrice);
        await tx.wait();
        alert("Product added to blockchain!");

        // Optional: POST to backend for DB entry
        await fetch('/product/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productName, manufacturer, basePrice })
        });

        window.location.href = "/product/myproducts";

      } catch (err) {
        console.error(err);
        alert("Error creating product: " + err.message);
      }
    };
  </script>
</body>
</html>
