<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Stock</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
    <style>
        .dropdown-menu {
            max-height: 200px;
            overflow-y: auto;
        }
    </style>
</head>

<body>
    <%- include('partials/adminHeader') %>
    <script src="/bootstrap/js/bootstrap.bundle.min.js"></script>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Product Stock</h1>

        <!-- Search and Dropdown -->
        <div class="mb-4">
            <label for="productSearch" class="form-label">Search Product:</label>
            <div class="input-group">
                <input type="text" id="productSearch" class="form-control" placeholder="Type product name...">
                <button class="btn btn-primary" id="searchButton">Search</button>
            </div>
            <ul class="dropdown-menu mt-2" id="productDropdown1"></ul>
            <script>
                document.getElementById('searchButton').addEventListener('click', async () => {
                    const query = document.getElementById('productSearch').value.trim();
                    if (query) {
                        // Fetch stock details for the entered product name
                        await fetchStockDetails(query);
                    }
                });
            </script>
        </div>

        <!-- Similar Products Section -->
        <div id="similarProducts" class="mt-4 d-none">
            <h3>Product Stock Details</h3>
            <table class="table table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Company Name</th>
                        <th>Company Address</th>
                        <th>Company Email</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody id="similarProductsTableBody">
                    <!-- Similar products will be dynamically added here -->
                </tbody>
            </table>
            <p id="noSimilarProducts" class="text-muted d-none">No products found.</p>
        </div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script>
        const productSearch = document.getElementById('productSearch');
        const productDropdown = document.getElementById('productDropdown1');
        const similarProductsElement = document.getElementById('similarProducts');
        const similarProductsTableBody = document.getElementById('similarProductsTableBody');
        const noSimilarProducts = document.getElementById('noSimilarProducts');

        productSearch.addEventListener('input', async () => {
            const query = productSearch.value.trim();
            if (query.length === 0) {
                productDropdown.innerHTML = '';
                productDropdown.classList.remove('show');
                return;
            }

            // Fetch matching product names from the server
            const response = await fetch(`/product/search?query=${query}`);
            const products = await response.json();

            // Populate the dropdown
            productDropdown.innerHTML = '';
            products.forEach(product => {
                const li = document.createElement('li');
                li.classList.add('dropdown-item');
                li.textContent = product.productName;
                li.addEventListener('click', () => fetchStockDetails(product.productName));
                productDropdown.appendChild(li);
            });
            productDropdown.classList.add('show');
        });

        async function fetchStockDetails(productName) {
            productSearch.value = productName;
            productDropdown.classList.remove('show');

            // Fetch stock details for the selected product
            const response = await fetch(`/product/stock/${productName}`);
            const data = await response.json();

            if (data.error) {
                alert(data.error);
                return;
            }

            // Display similar products in a table
            if (data.similarProducts && data.similarProducts.length > 0) {
                // Group products by company name, address, email, and product name
                const groupedData = data.similarProducts.reduce((acc, product) => {
                    const companyKey = `${product.companyName}|${product.companyAddress}|${product.companyEmail}`;
                    if (!acc[companyKey]) {
                        acc[companyKey] = {};
                    }
                    if (!acc[companyKey][product.productName]) {
                        acc[companyKey][product.productName] = 0;
                    }
                    acc[companyKey][product.productName] += product.quantity;
                    return acc;
                }, {});

                // Generate table rows for grouped data
                similarProductsTableBody.innerHTML = Object.entries(groupedData)
                    .map(([companyKey, products]) => {
                        const [companyName, companyAddress, companyEmail] = companyKey.split('|');
                        const productRows = Object.entries(products)
                            .map(([productName, quantity]) => `
                                <tr>
                                    <td>${companyName}</td>
                                    <td>${companyAddress}</td>
                                    <td>${companyEmail}</td>
                                    <td>${productName}</td>
                                    <td>${quantity}</td>
                                </tr>
                            `)
                            .join('');
                        return productRows;
                    })
                    .join('');

                similarProductsElement.classList.remove('d-none');
                noSimilarProducts.classList.add('d-none');
            } else {
                similarProductsTableBody.innerHTML = '';
                similarProductsElement.classList.remove('d-none');
                noSimilarProducts.classList.remove('d-none');
            }
        }
    </script>
</body>

</html>